{"version":3,"file":"time.js","sources":["../src/js/helpers/updateTime.js","../src/js/time.js"],"sourcesContent":["export const updateTime = function (obj, timeZone) {\n  return Object.keys(obj).reduce((acc, el) => {\n    return {\n      ...acc,\n      [el]: String(el === 'hours' ? obj[el] + timeZone : obj[el]).padStart(\n        2,\n        '0'\n      ),\n    };\n  }, {});\n};\n\nexport function convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n","/*\nВідображення поточної дати та часу з можливістю перемикання режимів.\nПотрібно реалізувати інтерфейс, що дозволяє користувачеві перемикати між трьома режимами відображення: \nповний формат (дата + час), лише дата, лише час.\n\n\"full\" – показує поточну дату і час.\n\"date\" – показує лише дату.\n\"time\" – показує лише час.\n\nЧас оновлюється щосекунди у режимах \"time\" та \"full\".\nПри виборі режиму \"date\", оновлення зупиняється, і показується тільки дата.\n\n\nДля форматування дати використай цю функцію \nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n*/\n\nimport { convertMs, updateTime } from './helpers/updateTime';\n\nlet intervalId = null;\nconst currentDate = new Date();\nconst timeZone = (currentDate.getTimezoneOffset() / 60) * -1;\nconst timeZoneIntl = Intl.DateTimeFormat().resolvedOptions().timeZone;\nconst refs = {\n  display: document.querySelector('.js-display'),\n  btnWrapper: document.querySelector('.js-btn-wrapper'),\n};\n\nconst handleClick = function (event) {\n  if (event.target.nodeName !== 'BUTTON') return;\n  clearInterval(intervalId);\n  const { action } = event.target.dataset;\n  if (action === 'date') {\n    refs.display.textContent = getCurrentDate();\n    return;\n  }\n  if (action === 'time') {\n    intervalId = setInterval(() => {\n      refs.display.textContent = getCurrentTime();\n    }, 1000);\n    return;\n  }\n  if (action === 'full') {\n    intervalId = setInterval(() => {\n      refs.display.textContent = getCurrentFullDate();\n    }, 1000);\n  }\n};\n\nconst getCustomCurrentTime = function () {\n  const { hours, minutes, seconds } = updateTime(\n    convertMs(Date.now()),\n    timeZone\n  );\n  return `${hours}:${minutes}:${seconds}`;\n};\n\nconst getCurrentTime = function () {\n  return new Intl.DateTimeFormat('uk-UA', {\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric',\n    timeZone: timeZoneIntl,\n  }).format(Date.now());\n};\n\nconst getCurrentDate = function () {\n  return new Intl.DateTimeFormat('uk-UA', {\n    year: 'numeric',\n    month: 'numeric',\n    day: 'numeric',\n  }).format(Date.now());\n};\n\nconst getCurrentFullDate = function () {\n  return `${getCurrentDate()} ${getCurrentTime()}`;\n};\n\nrefs.btnWrapper.addEventListener('click', handleClick);\n\nconst loadPage = function () {\n  intervalId = setInterval(() => {\n    refs.display.textContent = getCustomCurrentTime();\n  }, 1000);\n};\nloadPage();\n"],"names":["updateTime","obj","timeZone","acc","el","convertMs","ms","days","hours","minutes","seconds","intervalId","currentDate","timeZoneIntl","refs","handleClick","event","action","getCurrentDate","getCurrentTime","getCurrentFullDate","getCustomCurrentTime","loadPage"],"mappings":"oDAAO,MAAMA,EAAa,SAAUC,EAAKC,EAAU,CACjD,OAAO,OAAO,KAAKD,CAAG,EAAE,OAAO,CAACE,EAAKC,KAC5B,CACL,GAAGD,EACH,CAACC,CAAE,EAAG,OAAOA,IAAO,QAAUH,EAAIG,CAAE,EAAIF,EAAWD,EAAIG,CAAE,CAAC,EAAE,SAC1D,EACA,GACD,CACF,GACA,EAAE,CACP,EAEO,SAASC,EAAUC,EAAI,CAQ5B,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAE1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EAEpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EAEjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAS,CAC1C,CCOA,IAAIC,EAAa,KACjB,MAAMC,EAAc,IAAI,KAClBV,EAAYU,EAAY,kBAAmB,EAAG,GAAM,GACpDC,EAAe,KAAK,iBAAiB,gBAAiB,EAAC,SACvDC,EAAO,CACX,QAAS,SAAS,cAAc,aAAa,EAC7C,WAAY,SAAS,cAAc,iBAAiB,CACtD,EAEMC,EAAc,SAAUC,EAAO,CACnC,GAAIA,EAAM,OAAO,WAAa,SAAU,OACxC,cAAcL,CAAU,EACxB,KAAM,CAAE,OAAAM,CAAM,EAAKD,EAAM,OAAO,QAChC,GAAIC,IAAW,OAAQ,CACrBH,EAAK,QAAQ,YAAcI,EAAgB,EAC3C,MACJ,CACE,GAAID,IAAW,OAAQ,CACrBN,EAAa,YAAY,IAAM,CAC7BG,EAAK,QAAQ,YAAcK,EAAgB,CAC5C,EAAE,GAAI,EACP,MACJ,CACMF,IAAW,SACbN,EAAa,YAAY,IAAM,CAC7BG,EAAK,QAAQ,YAAcM,EAAoB,CAChD,EAAE,GAAI,EAEX,EAEMC,EAAuB,UAAY,CACvC,KAAM,CAAE,MAAAb,EAAO,QAAAC,EAAS,QAAAC,CAAS,EAAGV,EAClCK,EAAU,KAAK,KAAK,EACpBH,CACD,EACD,MAAO,GAAGM,CAAK,IAAIC,CAAO,IAAIC,CAAO,EACvC,EAEMS,EAAiB,UAAY,CACjC,OAAO,IAAI,KAAK,eAAe,QAAS,CACtC,KAAM,UACN,OAAQ,UACR,OAAQ,UACR,SAAUN,CACX,CAAA,EAAE,OAAO,KAAK,KAAK,CACtB,EAEMK,EAAiB,UAAY,CACjC,OAAO,IAAI,KAAK,eAAe,QAAS,CACtC,KAAM,UACN,MAAO,UACP,IAAK,SACN,CAAA,EAAE,OAAO,KAAK,KAAK,CACtB,EAEME,EAAqB,UAAY,CACrC,MAAO,GAAGF,EAAc,CAAE,IAAIC,EAAgB,CAAA,EAChD,EAEAL,EAAK,WAAW,iBAAiB,QAASC,CAAW,EAErD,MAAMO,EAAW,UAAY,CAC3BX,EAAa,YAAY,IAAM,CAC7BG,EAAK,QAAQ,YAAcO,EAAsB,CAClD,EAAE,GAAI,CACT,EACAC,EAAU"}